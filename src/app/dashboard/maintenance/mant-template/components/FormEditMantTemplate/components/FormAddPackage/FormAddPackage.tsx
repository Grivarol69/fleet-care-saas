'use client';

import { useState } from 'react';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Package, Loader2 } from 'lucide-react';
import axios from 'axios';
import { useToast } from '@/components/hooks/use-toast';
import { FormAddPackageProps } from './FormAddPackage.types';

// Schema de validaci칩n para el paquete
const formSchema = z.object({
  name: z.string().min(2, {
    message: 'El nombre debe tener al menos 2 caracteres',
  }),
  triggerKm: z.number().min(1, {
    message: 'El kilometraje debe ser mayor a 0',
  }),
  description: z.string().optional(),
  estimatedCost: z.number().min(0).optional(),
  estimatedTime: z.number().min(0).max(24).optional(),
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']),
  packageType: z.enum(['PREVENTIVE', 'CORRECTIVE', 'PREDICTIVE']),
});

type FormData = z.infer<typeof formSchema>;

export function FormAddPackage({
  isOpen,
  setIsOpen,
  templateId,
  onAddPackage,
}: FormAddPackageProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      triggerKm: 5000,
      description: '',
      estimatedCost: 0,
      estimatedTime: 0,
      priority: 'MEDIUM',
      packageType: 'PREVENTIVE',
    },
  });

  const onSubmit = async (values: FormData) => {
    try {
      setIsLoading(true);

      // Debug: verificar templateId
      console.log('游댌 DEBUG - templateId recibido:', templateId);
      console.log('游댌 DEBUG - payload completo:', { templateId, ...values });

      const payload = {
        templateId,
        ...values,
        // Asegurar que valores vac칤os se env칤en como null
        description: values.description || null,
        estimatedCost: values.estimatedCost || null,
        estimatedTime: values.estimatedTime || null,
      };

      await axios.post('/api/maintenance/packages', payload);

      // Generar nombre autom치tico si est치 vac칤o
      const autoName = `Mantenimiento ${values.triggerKm.toLocaleString()} km`;

      toast({
        title: '춰Paquete creado!',
        description: `El paquete "${values.name || autoName}" ha sido creado exitosamente.`,
      });

      // Resetear form y cerrar modal
      form.reset();
      setIsOpen(false);
      onAddPackage();

    } catch (error) {
      console.error('Error creating package:', error);

      let errorMessage = 'Algo sali칩 mal al crear el paquete';
      if (axios.isAxiosError(error)) {
        if (error.response?.status === 409) {
          errorMessage = 'Ya existe un paquete para este kilometraje en este template';
        } else if (error.response?.status === 400) {
          errorMessage = 'Datos inv치lidos, por favor revise los campos';
        } else if (error.response?.status === 401) {
          errorMessage = 'No autorizado para crear paquetes';
        } else if (error.response?.status === 404) {
          errorMessage = 'Template no encontrado';
        } else if (error.response?.data?.error) {
          errorMessage = error.response.data.error;
        }
      }

      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Auto-generar nombre basado en kilometraje
  const triggerKm = form.watch('triggerKm');
  const autoGeneratedName = triggerKm ? `Mantenimiento ${triggerKm.toLocaleString()} km` : '';

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Package className="h-5 w-5 text-blue-500" />
            Agregar Nuevo Paquete
          </DialogTitle>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

              {/* Kilometraje */}
              <FormField
                control={form.control}
                name="triggerKm"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Kilometraje *</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="5000"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Nombre */}
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>
                      Nombre del Paquete
                      {autoGeneratedName && (
                        <span className="text-xs text-muted-foreground ml-2">
                          (sugerido: {autoGeneratedName})
                        </span>
                      )}
                    </FormLabel>
                    <FormControl>
                      <Input
                        placeholder={autoGeneratedName || "Ej: Mantenimiento 5,000 km"}
                        {...field}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Costo Estimado */}
              <FormField
                control={form.control}
                name="estimatedCost"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Costo Estimado (COP)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="125000"
                        {...field}
                        onChange={(e) => field.onChange(parseFloat(e.target.value) || undefined)}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Tiempo Estimado */}
              <FormField
                control={form.control}
                name="estimatedTime"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tiempo Estimado (horas)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        step="0.5"
                        placeholder="2.5"
                        {...field}
                        onChange={(e) => field.onChange(parseFloat(e.target.value) || undefined)}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Prioridad */}
              <FormField
                control={form.control}
                name="priority"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Prioridad</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      value={field.value}
                      disabled={isLoading}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione prioridad" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="LOW">Baja</SelectItem>
                        <SelectItem value="MEDIUM">Media</SelectItem>
                        <SelectItem value="HIGH">Alta</SelectItem>
                        <SelectItem value="CRITICAL">Cr칤tica</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Tipo de Paquete */}
              <FormField
                control={form.control}
                name="packageType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tipo de Mantenimiento</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      value={field.value}
                      disabled={isLoading}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione tipo" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="PREVENTIVE">Preventivo</SelectItem>
                        <SelectItem value="CORRECTIVE">Correctivo</SelectItem>
                        <SelectItem value="PREDICTIVE">Predictivo</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Descripci칩n */}
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem className="md:col-span-2">
                    <FormLabel>Descripci칩n (Opcional)</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Descripci칩n del paquete de mantenimiento..."
                        className="resize-none"
                        rows={3}
                        {...field}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Botones */}
            <div className="flex justify-end gap-4 pt-6 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsOpen(false)}
                disabled={isLoading}
              >
                Cancelar
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {isLoading ? 'Creando...' : 'Crear Paquete'}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}