generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========================================
// MULTI-TENANCY & BILLING CORE
// ========================================

model Tenant {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique // Para subdominios
  domain            String?             @unique // Dominio personalizado opcional
  logo              String?
  settings          Json?               // Configuraciones específicas del tenant
  subscriptionId    String?             @unique
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  trialEndsAt       DateTime?
  billingEmail      String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relaciones
  users                       User[]
  vehicles                    Vehicle[]
  vehicleBrands               VehicleBrand[]
  vehicleLines                VehicleLine[]
  vehicleTypes                VehicleType[]
  mantCategories              MantCategory[]
  mantItems                   MantItem[]
  // mantPlans                   MantPlan[]                  // DEPRECATED 02-Oct-2025
  // vehicleMantPlans            VehicleMantPlan[]           // DEPRECATED 02-Oct-2025
  // vehicleMantPackages         VehicleMantPackage[]        // DEPRECATED 02-Oct-2025
  maintenanceTemplates        MaintenanceTemplate[]      // ✅ CURRENT
  vehicleMaintenanceMetrics   VehicleMaintenanceMetrics[] // ✅ CURRENT (Future)
  vehicleMantPrograms         VehicleMantProgram[]        // ✅ CURRENT ARCHITECTURE
  vehicleProgramPackages      VehicleProgramPackage[]     // ✅ CURRENT ARCHITECTURE
  vehicleProgramItems         VehicleProgramItem[]        // ✅ CURRENT ARCHITECTURE
  workOrders                  WorkOrder[]
  technicians                 Technician[]
  providers                   Provider[]
  documents                   Document[]
  subscriptions               Subscription[]
  drivers                     Driver[]
  vehicleDrivers              VehicleDriver[]
  maintenanceAlerts           MaintenanceAlert[]
  invoices                    Invoice[]

  @@index([slug])
  @@index([subscriptionStatus])
}

model User {
  id        String   @id @default(uuid())
  tenantId  String
  email     String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  avatar    String?
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relaciones de auditoría - Invoice & MasterParts
  invoicesApproved          Invoice[]        @relation("InvoiceApprover")
  invoicesRegistered        Invoice[]        @relation("InvoiceRegistrar")
  priceHistoryApproved      PartPriceHistory[] @relation("PriceHistoryApprover")
  priceHistoryPurchased     PartPriceHistory[] @relation("PriceHistoryPurchaser")
  paymentsRegistered        InvoicePayment[] @relation("PaymentRegistrar")

  @@index([tenantId])
  @@index([email])
  @@unique([tenantId, email])
}

// ========================================
// BILLING & SUBSCRIPTIONS
// ========================================

model Subscription {
  id                    String             @id @default(uuid())
  tenantId              String
  mercadoPagoUserId     String?            // ID del usuario en MercadoPago
  preapprovalId         String?            @unique // ID de la suscripción recurrente
  planId                String             // ID del plan de precios
  status                SubscriptionStatus
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean            @default(false)
  lastPaymentId         String?            // Último pago procesado
  failedPaymentAttempts Int                @default(0)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@index([tenantId])
  @@index([mercadoPagoUserId])
  @@index([preapprovalId])
}

model Payment {
  id               String        @id @default(uuid())
  subscriptionId   String
  mercadoPagoId    String        @unique // ID del pago en MercadoPago
  amount           Decimal       @db.Decimal(10, 2)
  currency         String        @default("COP") // Peso colombiano
  status           PaymentStatus
  paymentMethod    String?       // Tarjeta, PSE, etc.
  description      String?
  failureReason    String?
  processedAt      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([mercadoPagoId])
  @@index([status])
}

// ========================================
// VEHICLE MANAGEMENT
// ========================================

model VehicleBrand {
  id        Int      @id @default(autoincrement())
  tenantId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lines                VehicleLine[]
  vehicles             Vehicle[]
  // mantPlans            MantPlan[]                 // DEPRECATED 02-Oct-2025
  maintenanceTemplates MaintenanceTemplate[]         // ✅ CURRENT

  @@index([tenantId])
  @@unique([tenantId, name])
}

model VehicleLine {
  id        Int      @id @default(autoincrement())
  tenantId  String
  name      String
  brandId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  brand                VehicleBrand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  vehicles             Vehicle[]
  // mantPlans            MantPlan[]                 // DEPRECATED 02-Oct-2025
  maintenanceTemplates MaintenanceTemplate[]         // ✅ CURRENT

  @@index([tenantId])
  @@index([brandId])
  @@unique([tenantId, brandId, name])
}

model VehicleType {
  id        Int      @id @default(autoincrement())
  tenantId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicles Vehicle[]

  @@index([tenantId])
  @@unique([tenantId, name])
}

model Vehicle {
  id             Int      @id @default(autoincrement())
  tenantId       String
  licensePlate   String
  brandId        Int
  lineId         Int
  typeId         Int
  year           Int
  color          String
  mileage        Int      @default(0)
  status         VehicleStatus @default(ACTIVE)
  situation      VehicleSituation @default(AVAILABLE)
  photo          String?
  cylinder       Int?
  bodyWork       String?
  engineNumber   String?
  chasisNumber   String?
  ownerCard      String?
  owner          VehicleOwner @default(OWN)
  typePlate      PlateType    @default(PARTICULAR)
  lastKilometers Int?
  lastRecorder   DateTime? @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  tenant                    Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  brand                     VehicleBrand               @relation(fields: [brandId], references: [id])
  line                      VehicleLine                @relation(fields: [lineId], references: [id])
  type                      VehicleType                @relation(fields: [typeId], references: [id])
  documents                 Document[]
  workOrders                WorkOrder[]
  odometerLogs              OdometerLog[]
  // vehicleMantPlans          VehicleMantPlan[]           // DEPRECATED 02-Oct-2025
  maintenanceAlerts         MaintenanceAlert[]
  vehicleDrivers            VehicleDriver[]
  vehicleMaintenanceMetrics  VehicleMaintenanceMetrics?  // ✅ CURRENT (Future)
  vehicleMantProgram         VehicleMantProgram?          // ✅ CURRENT ARCHITECTURE

  @@index([tenantId])
  @@index([licensePlate])
  @@index([brandId])
  @@index([lineId])
  @@index([typeId])
  @@unique([tenantId, licensePlate])
}

// ========================================
// MAINTENANCE SYSTEM
// ========================================

model MantCategory {
  id          Int      @id @default(autoincrement())
  tenantId    String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  mantItems MantItem[]

  @@index([tenantId])
  @@unique([tenantId, name])
}

model MantItem {
  id                  Int      @id @default(autoincrement())
  tenantId            String
  name                String
  description         String?
  mantType            MantType
  estimatedTime       Decimal  @db.Decimal(5, 2) // Horas
  estimatedCost       Decimal? @db.Decimal(10, 2) // Costo estimado del item
  categoryId          Int
  status              Status   @default(ACTIVE)

  // NUEVO: Discriminación de tipo y vinculación con MasterPart
  type                ItemType @default(ACTION) // ACTION, PART, SERVICE
  technicalNotes      String?  @db.Text // Recomendaciones técnicas para el técnico

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  tenant              Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category            MantCategory          @relation(fields: [categoryId], references: [id])
  // planTasks           PlanTask[]                  // DEPRECATED 02-Oct-2025
  packageItems        PackageItem[]                  // ✅ CURRENT (Template items)
  workOrderItems      WorkOrderItem[]
  // vehicleMantPlanItem VehicleMantPlanItem[]       // DEPRECATED 02-Oct-2025
  vehicleProgramItems VehicleProgramItem[]           // ✅ CURRENT ARCHITECTURE
  parts               MantItemPart[]                 // ✅ Artículos vinculados al item

  @@index([tenantId])
  @@index([categoryId])
  @@index([type])
  @@unique([tenantId, name])
}

// ========================================
// DEPRECATED - 02 Octubre 2025
// Reemplazado por: MaintenanceTemplate
// ========================================
// model MantPlan {
//   id             Int      @id @default(autoincrement())
//   tenantId       String
//   name           String
//   description    String?
//   vehicleBrandId Int
//   vehicleLineId  Int
//   status         Status   @default(ACTIVE)
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
//
//   tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//   brand           VehicleBrand      @relation(fields: [vehicleBrandId], references: [id])
//   line            VehicleLine       @relation(fields: [vehicleLineId], references: [id])
//   planTasks       PlanTask[]
//   vehicleMantPlan VehicleMantPlan[]
//
//   @@index([tenantId])
//   @@index([vehicleBrandId])
//   @@index([vehicleLineId])
//   @@unique([tenantId, vehicleBrandId, vehicleLineId, name])
// }

// ========================================
// DEPRECATED - 02 Octubre 2025
// Reemplazado por: PackageItem
// ========================================
// model PlanTask {
//   id         Int      @id @default(autoincrement())
//   planId     Int
//   mantItemId Int
//   triggerKm  Int      // Cada cuántos km se ejecuta
//   createdAt  DateTime @default(now())
//
//   mantPlan MantPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
//   mantItem MantItem @relation(fields: [mantItemId], references: [id])
//
//   @@index([planId])
//   @@index([mantItemId])
//   @@unique([planId, mantItemId])
// }

// ========================================
// DEPRECATED - 02 Octubre 2025
// Reemplazado por: VehicleMantProgram + VehicleProgramPackage + VehicleProgramItem
// ========================================
// model VehicleMantPlan {
//   id                  Int      @id @default(autoincrement())
//   tenantId            String
//   vehicleId           Int
//   mantPlanId          Int
//   assignedAt          DateTime @default(now())
//   lastKmCheck         Int?
//   status              Status   @default(ACTIVE)
//   createdAt           DateTime @default(now())
//   updatedAt           DateTime @updatedAt
//
//   tenant              Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//   vehicle             Vehicle               @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
//   mantPlan            MantPlan              @relation(fields: [mantPlanId], references: [id])
//   vehicleMantPlanItem VehicleMantPlanItem[]
//   vehicleMantPackages VehicleMantPackage[]
//
//   @@index([tenantId])
//   @@index([vehicleId])
//   @@index([mantPlanId])
//   @@unique([vehicleId, mantPlanId])
// }

// model VehicleMantPlanItem {
//   id                Int      @id @default(autoincrement())
//   vehicleMantPlanId Int
//   mantItemId        Int
//   vehicleMantPackageId Int?
//   executionMileage  Int
//   technicianId      Int?
//   providerId        Int?
//   startDate         DateTime?
//   endDate           DateTime?
//   cost              Decimal? @db.Decimal(10, 2)
//   notes             String?
//   status            WorkOrderStatus @default(PENDING)
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
//
//   vehicleMantPlan VehicleMantPlan @relation(fields: [vehicleMantPlanId], references: [id], onDelete: Cascade)
//   mantItem        MantItem        @relation(fields: [mantItemId], references: [id])
//   technician      Technician?     @relation(fields: [technicianId], references: [id])
//   provider        Provider?       @relation(fields: [providerId], references: [id])
//   vehicleMantPackage VehicleMantPackage? @relation(fields: [vehicleMantPackageId], references: [id])
//
//   @@index([vehicleMantPlanId])
//   @@index([mantItemId])
//   @@unique([vehicleMantPlanId, mantItemId])
// }

// model VehicleMantPackage {
//   id                    Int      @id @default(autoincrement())
//   tenantId              String
//   vehicleMantPlanId     Int
//   packageName           String
//   packageDescription    String?
//   originalTriggerKm     Int
//   scheduledExecutionKm  Int
//   actualExecutionKm     Int?
//   deviationKm           Int?
//   onTimeExecution       Boolean?
//   estimatedCost         Decimal? @db.Decimal(10, 2)
//   actualCost            Decimal? @db.Decimal(10, 2)
//   status                WorkOrderStatus @default(PENDING)
//   priority              Priority @default(MEDIUM)
//   executedAt            DateTime?
//   workOrderId           Int?
//   createdAt             DateTime @default(now())
//   updatedAt             DateTime @updatedAt
//
//   tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//   vehicleMantPlan     VehicleMantPlan     @relation(fields: [vehicleMantPlanId], references: [id], onDelete: Cascade)
//   workOrder           WorkOrder?          @relation(fields: [workOrderId], references: [id])
//   vehicleMantPlanItems VehicleMantPlanItem[]
//
//   @@index([tenantId])
//   @@index([vehicleMantPlanId])
//   @@index([scheduledExecutionKm])
//   @@index([status])
//   @@index([onTimeExecution])
//   @@unique([vehicleMantPlanId, originalTriggerKm])
// }

// ========================================
// MAINTENANCE TEMPLATES & PACKAGES SYSTEM
// ========================================

model MaintenanceTemplate {
  id              Int      @id @default(autoincrement())
  tenantId        String
  name            String   // "Toyota Hilux Standard", "Ford Ranger Heavy Duty"
  description     String?
  vehicleBrandId  Int      // Requerido: específico para una marca
  vehicleLineId   Int      // Requerido: específico para una línea
  version         String   @default("1.0") // Para tracking de versiones
  isDefault       Boolean  @default(false) // Template por defecto para esta marca/línea
  status          Status   @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  brand           VehicleBrand?       @relation(fields: [vehicleBrandId], references: [id])
  line            VehicleLine?        @relation(fields: [vehicleLineId], references: [id])
  packages        MaintenancePackage[]

  @@index([tenantId])
  @@index([vehicleBrandId])
  @@index([vehicleLineId])
  @@index([isDefault])
  @@unique([tenantId, name])
}

model MaintenancePackage {
  id              Int      @id @default(autoincrement())
  templateId      Int
  name            String   // "Mantenimiento 5,000 km", "Mantenimiento 15,000 km"
  triggerKm       Int      // 5000, 15000, 30000, 50000, etc.
  description     String?
  estimatedCost   Decimal? @db.Decimal(10, 2) // Costo estimado total del paquete
  estimatedTime   Decimal? @db.Decimal(5, 2) // Tiempo estimado total en horas
  priority        Priority @default(MEDIUM)
  packageType     MantType @default(PREVENTIVE)
  status          Status   @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  template        MaintenanceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  packageItems    PackageItem[]

  @@index([templateId])
  @@index([triggerKm])
  @@unique([templateId, triggerKm]) // Un template no puede tener 2 paquetes para el mismo km
}

model PackageItem {
  id            Int      @id @default(autoincrement())
  packageId     Int
  mantItemId    Int
  triggerKm     Int      // Km en que se ejecuta este item específico
  priority      Priority @default(MEDIUM) // Prioridad específica del item en este paquete
  estimatedCost Decimal? @db.Decimal(10, 2) // Costo estimado específico
  estimatedTime Decimal? @db.Decimal(5, 2)  // Tiempo estimado específico
  isOptional    Boolean  @default(false) // Si el item es opcional en el paquete
  order         Int      @default(0)     // Orden de ejecución dentro del paquete
  notes         String?  // Notas específicas para este item en este paquete
  status        Status   @default(ACTIVE) // Estado del item en este paquete
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  package  MaintenancePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  mantItem MantItem           @relation(fields: [mantItemId], references: [id])

  @@index([packageId])
  @@index([mantItemId])
  @@index([triggerKm])
  @@index([priority])
  @@index([status])
  @@unique([packageId, mantItemId]) // Un paquete no puede tener el mismo item duplicado
}

// ========================================
// VEHICLE-SPECIFIC MAINTENANCE PROGRAMS
// ========================================

model VehicleMaintenanceMetrics {
  id                    Int      @id @default(autoincrement())
  tenantId              String
  vehicleId             Int

  // INFORMACIÓN DE ORIGEN (solo referencial - NO referencia FK)
  generatedFrom         String?  // "Template: Toyota Hilux Standard v1.2"
  generatedAt           DateTime @default(now())
  generatedBy           String   // User ID quien generó el programa

  // KILOMETRAJE INICIAL AL MOMENTO DE CREAR PROGRAMA
  assignmentKm          Int      // Km del vehículo cuando se asignó el programa
  nextMaintenanceKm     Int      // Próximo vencimiento REAL conocido por usuario
  nextMaintenanceDesc   String?  // "Cambio aceite 30,000 km" - descripción del próximo

  // MÉTRICAS DE DESVIACIÓN PARA RANKING
  totalMaintenances     Int      @default(0)     // Cantidad total de mantenimientos completados
  avgDeviationKm        Int      @default(0)     // Desviación promedio (+ tarde, - temprano)
  maintenanceScore      Int      @default(100)   // Score 0-100 para ranking (100 = perfecto)
  lastScoreUpdate       DateTime @default(now()) // Última actualización del score

  // CONFIGURACIÓN
  alertOffsetKm         Int      @default(1000)  // Alertar X km antes del vencimiento
  isActive              Boolean  @default(true)  // Programa activo o pausado
  notes                 String?  // Notas del usuario sobre este programa

  status                Status   @default(ACTIVE)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  tenant                Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicle               Vehicle              @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  scheduledPackages     ScheduledPackage[]

  @@unique([vehicleId])   // Un vehículo solo puede tener un programa activo
  @@index([tenantId])
  @@index([maintenanceScore]) // Para ranking
  @@index([avgDeviationKm])   // Para análisis de patrones
}

model ScheduledPackage {
  id                    Int      @id @default(autoincrement())
  scheduleId            Int

  // INFORMACIÓN DEL PAQUETE (copiada independientemente)
  packageName           String   // "Mantenimiento 15,000 km" (copiado del template)
  packageDescription    String?  // Descripción copiada

  // KILOMETRAJES - La clave del sistema
  idealExecutionKm      Int      // Km ideal según template original (15000, 30000, etc.)
  scheduledExecutionKm  Int      // Km programado REAL para este vehículo específico
  actualExecutionKm     Int?     // Km REAL cuando se ejecutó (null si no ejecutado)

  // DESVIACIÓN Y MÉTRICAS PARA RANKING
  deviationKm           Int?     // actualExecutionKm - scheduledExecutionKm (calculado al completar)
  onTimeExecution       Boolean? // true si se hizo a tiempo, false si tarde, null si no ejecutado

  // COSTOS
  estimatedCost         Decimal? @db.Decimal(10, 2) // Costo estimado del paquete
  actualCost            Decimal? @db.Decimal(10, 2) // Costo real (suma de WorkOrderExpenses)

  // ESTADO Y TRACKING
  status                ScheduleStatus @default(SCHEDULED)
  workOrderId           Int?     // WorkOrder generada para este paquete (cuando se ejecuta)
  executedAt            DateTime? // Fecha real de ejecución
  alertLevel            AlertLevel @default(LOW) // Nivel de alerta actual

  // AUDITORÍA
  adjustedBy            String?  // User ID o "SYSTEM_AUTO" si fue ajuste automático
  adjustmentReason      String?  // Razón del ajuste de programación
  lastAlertSent         DateTime? // Última alerta enviada

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  schedule              VehicleMaintenanceMetrics @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  workOrder             WorkOrder?                 @relation(fields: [workOrderId], references: [id])

  @@index([scheduleId])
  @@index([scheduledExecutionKm])
  @@index([alertLevel])
  @@index([deviationKm])        // Para análisis de patrones
  @@index([onTimeExecution])    // Para ranking
}

// ========================================
// WORK ORDERS (EXTENDIDO)
// ========================================

model WorkOrder {
  id              Int      @id @default(autoincrement())
  tenantId        String
  vehicleId       Int
  title           String
  description     String?
  mantType        MantType
  priority        Priority
  status          WorkOrderStatus @default(PENDING)
  technicianId    Int?
  providerId      Int?
  creationMileage Int

  // CONEXIÓN CON PAQUETES DE MANTENIMIENTO
  isPackageWork   Boolean         @default(false) // true si es WorkOrder de paquete completo
  packageName     String?         // Nombre del paquete si aplica
  scheduledPackageId Int?         // Referencia al ScheduledPackage que generó esta WorkOrder

  // Campos de trazabilidad financiera
  requestedBy     String          // User ID solicitante
  authorizedBy    String?         // User ID autorizador
  estimatedCost   Decimal?        @db.Decimal(10, 2) // Costo estimado
  actualCost      Decimal?        @db.Decimal(10, 2) // Costo real final
  costCenter      String?         // Centro de costos
  budgetCode      String?         // Código presupuestario

  // Campos legacy (mantener compatibilidad)
  plannedAmount   Decimal?        @db.Decimal(10, 2)
  realAmount      Decimal?        @db.Decimal(10, 2)

  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicle           Vehicle            @relation(fields: [vehicleId], references: [id])
  technician        Technician?        @relation(fields: [technicianId], references: [id])
  provider          Provider?          @relation(fields: [providerId], references: [id])
  workOrderItems    WorkOrderItem[]
  workOrderExpenses WorkOrderExpense[]
  approvals         WorkOrderApproval[]
  auditLogs         ExpenseAuditLog[]
  scheduledPackages ScheduledPackage[]           // ✅ CURRENT (VehicleMaintenanceMetrics)
  // vehicleMantPackages VehicleMantPackage[]     // DEPRECATED 02-Oct-2025
  vehicleProgramPackages VehicleProgramPackage[]  // ✅ CURRENT ARCHITECTURE
  maintenanceAlerts MaintenanceAlert[]           // ✅ Relación 1-to-many con alertas
  invoices          Invoice[]                     // ✅ Facturas vinculadas a esta WO

  @@index([tenantId])
  @@index([vehicleId])
  @@index([status])
  @@index([requestedBy])
  @@index([authorizedBy])
  @@index([isPackageWork]) // Para separar WorkOrders de paquetes vs individuales
}

model WorkOrderItem {
  id               Int      @id @default(autoincrement())
  workOrderId      Int
  mantItemId       Int

  // Detalles del item/repuesto
  description      String
  partNumber       String?
  brand            String?
  supplier         String

  // Costos detallados
  unitPrice        Decimal  @db.Decimal(10, 2)
  quantity         Int      @default(1)
  totalCost        Decimal  @db.Decimal(10, 2)

  // Trazabilidad
  purchasedBy      String   // User ID quien compró
  invoiceNumber    String?
  receiptUrl       String?  // URL del recibo escaneado

  // Campos legacy
  cost             Decimal? @db.Decimal(10, 2)
  executionMileage Int?
  notes            String?
  status           WorkOrderStatus @default(PENDING)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  workOrder    WorkOrder      @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  mantItem     MantItem       @relation(fields: [mantItemId], references: [id])
  invoiceItems InvoiceItem[]  // ✅ Items de factura vinculados

  @@index([workOrderId])
  @@index([mantItemId])
  @@index([supplier])
  @@index([purchasedBy])
}

model WorkOrderExpense {
  id            String         @id @default(cuid())
  workOrderId   Int
  expenseType   ExpenseType
  description   String
  amount        Decimal        @db.Decimal(10, 2)
  vendor        String         // Proveedor/Taller
  invoiceNumber String?
  receiptUrl    String?        // URL del recibo escaneado
  expenseDate   DateTime       @default(now())
  recordedBy    String         // User ID quien registró
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([expenseType])
  @@index([vendor])
  @@index([recordedBy])
}

model WorkOrderApproval {
  id            String              @id @default(cuid())
  workOrderId   Int
  approverLevel Int                 // 1=supervisor, 2=manager, 3=admin
  approvedBy    String              // User ID
  approvedAt    DateTime            @default(now())
  amount        Decimal             @db.Decimal(10, 2)
  notes         String?
  status        ApprovalStatus      @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([approverLevel])
  @@index([approvedBy])
  @@index([status])
}

model ExpenseAuditLog {
  id              String      @id @default(cuid())
  workOrderId     Int
  action          AuditAction // CREATED, APPROVED, MODIFIED, PAID
  previousValue   Json?
  newValue        Json
  performedBy     String      // User ID
  performedAt     DateTime    @default(now())
  ipAddress       String?
  userAgent       String?     // Para mejor trazabilidad
  createdAt       DateTime    @default(now())

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([performedBy])
  @@index([performedAt])
}

// ========================================
// INVOICE & MASTER PARTS SYSTEM (FASE 1-3)
// Sistema de facturación y catálogo de artículos
// ========================================

// 1. Master de Artículos - Catálogo compartido entre tenants
model MasterPart {
  id              String   @id @default(cuid())
  tenantId        String?  // NULL = compartido globalmente, FK = específico del tenant

  // Identificación
  code            String   @unique  // "BOSCH-123", "SHELL-5W40-SYNT"
  description     String              // "Filtro aceite motor BOSCH"
  category        String              // "FILTROS", "ACEITES", "LUBRICANTES"
  subcategory     String?             // "FILTROS_ACEITE", "FILTROS_AIRE"
  unit            String   @default("UNIDAD")  // "UNIDAD", "LITRO", "GALÓN", "KG"

  // Precio referencia (último conocido)
  referencePrice  Decimal? @db.Decimal(10, 2)
  lastPriceUpdate DateTime?

  // Specs técnicas (JSON flexible para FASE 3)
  specifications  Json?    // { "viscosity": "5W-40", "type": "synthetic", "apiRating": "SN/CF" }

  // Alternativas/Equivalentes (FASE 2-3)
  alternativeFor  String?  // FK a otro MasterPart (ej: genérico equivalente)
  alternativePart MasterPart? @relation("Alternatives", fields: [alternativeFor], references: [id], onDelete: SetNull)
  alternatives    MasterPart[] @relation("Alternatives")

  // Metadata
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  mantItemParts   MantItemPart[]
  invoiceItems    InvoiceItem[]
  priceHistory    PartPriceHistory[]
  compatibilities PartCompatibility[]  // FASE 3

  @@index([category])
  @@index([tenantId])
  @@index([code])
  @@index([isActive])
}

// 2. Tabla intermedia: MantItem ↔ MasterPart (many-to-many)
model MantItemPart {
  id            String   @id @default(cuid())
  mantItemId    Int
  mantItem      MantItem @relation(fields: [mantItemId], references: [id], onDelete: Cascade)
  masterPartId  String
  masterPart    MasterPart @relation(fields: [masterPartId], references: [id], onDelete: Restrict)

  quantity      Decimal  @default(1) @db.Decimal(10, 2)  // Ej: 4.5 litros de aceite
  isRequired    Boolean  @default(true)  // Requerido vs opcional
  isPrimary     Boolean  @default(false) // Artículo principal del item

  // Notas específicas de este vínculo
  notes         String?  // "Alternativamente usar CASTROL 5W-40"

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([mantItemId, masterPartId])
  @@index([mantItemId])
  @@index([masterPartId])
}

// 3. Invoice - Factura del proveedor
model Invoice {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Identificación factura
  invoiceNumber   String   // Número de factura del proveedor
  invoiceDate     DateTime // Fecha emisión factura
  dueDate         DateTime? // Fecha vencimiento pago

  // Proveedor (reutilizamos Provider existente, lo renombraremos a Supplier)
  supplierId      Int
  supplier        Provider @relation(fields: [supplierId], references: [id], onDelete: Restrict)

  // Vinculación con trabajo (opcional si factura es de WO)
  workOrderId     Int?
  workOrder       WorkOrder? @relation(fields: [workOrderId], references: [id], onDelete: SetNull)

  // Montos
  subtotal        Decimal  @db.Decimal(10, 2)
  taxAmount       Decimal  @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal  @db.Decimal(10, 2)
  currency        String   @default("COP")

  // Estado
  status          InvoiceStatus @default(PENDING)

  // Aprobación y auditoría
  approvedBy      String?
  approver        User?    @relation("InvoiceApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  approvedAt      DateTime?

  registeredBy    String   // Usuario que registró la factura
  registrar       User     @relation("InvoiceRegistrar", fields: [registeredBy], references: [id], onDelete: Restrict)

  // Notas y adjuntos
  notes           String?  @db.Text
  attachmentUrl   String?  // URL a factura escaneada/PDF

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  items           InvoiceItem[]
  payments        InvoicePayment[]  // FASE 2
  priceHistory    PartPriceHistory[]

  @@unique([tenantId, invoiceNumber])
  @@index([tenantId])
  @@index([supplierId])
  @@index([workOrderId])
  @@index([invoiceDate])
}

// 4. InvoiceItem - Línea de factura (granular)
model InvoiceItem {
  id              String   @id @default(cuid())
  invoiceId       String
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Vinculación con catálogo (CLAVE para analytics)
  masterPartId    String?  // Nullable: permite registrar sin catálogo inicialmente
  masterPart      MasterPart? @relation(fields: [masterPartId], references: [id], onDelete: SetNull)

  // Vinculación con trabajo realizado (traza: alerta → WO → factura)
  workOrderItemId Int?
  workOrderItem   WorkOrderItem? @relation(fields: [workOrderItemId], references: [id], onDelete: SetNull)

  // Datos de factura (lo que dice el documento físico)
  description     String   // Texto exacto de la factura
  quantity        Decimal  @db.Decimal(10, 2)
  unitPrice       Decimal  @db.Decimal(10, 2) // Precio real pagado
  subtotal        Decimal  @db.Decimal(10, 2)
  taxRate         Decimal  @default(0) @db.Decimal(5, 2)
  taxAmount       Decimal  @default(0) @db.Decimal(10, 2)
  total           Decimal  @db.Decimal(10, 2)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([invoiceId])
  @@index([masterPartId])
  @@index([workOrderItemId])
}

// 5. Histórico de precios por artículo + proveedor (GOLD MINE para analytics)
model PartPriceHistory {
  id              String   @id @default(cuid())
  tenantId        String   // Precios son específicos del tenant

  // Artículo
  masterPartId    String
  masterPart      MasterPart @relation(fields: [masterPartId], references: [id], onDelete: Cascade)

  // Proveedor
  supplierId      Int
  supplier        Provider @relation(fields: [supplierId], references: [id], onDelete: Restrict)

  // Precio y contexto
  price           Decimal  @db.Decimal(10, 2)
  quantity        Decimal  @default(1) @db.Decimal(10, 2)  // Por si aplican descuentos por volumen
  recordedAt      DateTime @default(now())

  // Auditoría (RESPONDE: "¿Quién autorizó esta compra?")
  invoiceId       String?
  invoice         Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  approvedBy      String?
  approver        User?    @relation("PriceHistoryApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  purchasedBy     String?  // Usuario que gestionó la compra
  purchaser       User?    @relation("PriceHistoryPurchaser", fields: [purchasedBy], references: [id], onDelete: SetNull)

  // Metadata
  createdAt       DateTime @default(now())

  @@index([masterPartId, supplierId])
  @@index([tenantId])
  @@index([recordedAt])
  @@index([approvedBy])
}

// ========================================
// FASE 2-3: MODELOS FUTUROS
// ========================================

// 6. Pagos de facturas (FASE 2 - control financiero)
model InvoicePayment {
  id              String   @id @default(cuid())
  invoiceId       String
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  amount          Decimal  @db.Decimal(10, 2)
  paymentDate     DateTime
  paymentMethod   String   // "TRANSFERENCIA", "CHEQUE", "EFECTIVO"
  referenceNumber String?  // Número de transferencia/cheque

  registeredBy    String
  registrar       User     @relation("PaymentRegistrar", fields: [registeredBy], references: [id], onDelete: Restrict)

  notes           String?
  createdAt       DateTime @default(now())

  @@index([invoiceId])
  @@index([paymentDate])
}

// 7. Compatibilidad de artículos por vehículo (FASE 3 - para sugerir alternativas)
model PartCompatibility {
  id              String   @id @default(cuid())
  masterPartId    String
  masterPart      MasterPart @relation(fields: [masterPartId], references: [id], onDelete: Cascade)

  // Filtros de compatibilidad (NULL = aplica a todos)
  brand           String?   // "Toyota"
  model           String?   // "Hilux"
  yearFrom        Int?      // 2020
  yearTo          Int?      // 2024
  engineType      String?   // "Diesel 2.8L", "Gasolina 2.7L"
  transmission    String?   // "Manual", "Automática"

  // Nivel de compatibilidad
  compatibility   CompatibilityLevel @default(COMPATIBLE)

  notes           String?  @db.Text
  verifiedBy      String?  // Usuario que verificó compatibilidad
  verifiedAt      DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([masterPartId])
  @@index([brand, model])
}

// ========================================
// PEOPLE & PROVIDERS
// ========================================

model Technician {
  id                    Int                     @id @default(autoincrement())
  tenantId              String
  name                  String
  email                 String?
  phone                 String?
  specialty             TechnicianSpecialty?
  status                Status                  @default(ACTIVE)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workOrders            WorkOrder[]
  // vehicleMantPlanItem   VehicleMantPlanItem[]       // DEPRECATED 02-Oct-2025
  vehicleProgramPackages VehicleProgramPackage[]      // ✅ CURRENT ARCHITECTURE
  vehicleProgramItems   VehicleProgramItem[]          // ✅ CURRENT ARCHITECTURE

  @@index([tenantId])
  @@unique([tenantId, name])
}

model Provider {
  id                    Int                     @id @default(autoincrement())
  tenantId              String
  name                  String
  email                 String?
  phone                 String?
  address               String?
  specialty             ProviderSpecialty?
  status                Status                  @default(ACTIVE)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workOrders            WorkOrder[]
  // vehicleMantPlanItem   VehicleMantPlanItem[]       // DEPRECATED 02-Oct-2025
  vehicleProgramPackages VehicleProgramPackage[]      // ✅ CURRENT ARCHITECTURE
  vehicleProgramItems   VehicleProgramItem[]          // ✅ CURRENT ARCHITECTURE
  invoices              Invoice[]                     // ✅ Facturas del proveedor
  priceHistory          PartPriceHistory[]            // ✅ Histórico de precios

  @@index([tenantId])
  @@unique([tenantId, name])
}

model Driver {
  id            Int      @id @default(autoincrement())
  tenantId      String
  name          String
  email         String?
  phone         String?
  licenseNumber String?
  licenseExpiry DateTime?
  status        Status   @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  tenant         Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  odometerLogs   OdometerLog[]
  vehicleDrivers VehicleDriver[]

  @@index([tenantId])
  @@unique([tenantId, licenseNumber])
}

model VehicleDriver {
  id         Int      @id @default(autoincrement())
  tenantId   String   // Multi-tenant support
  vehicleId  Int
  driverId   Int
  status     Status   @default(ACTIVE) // ACTIVE/INACTIVE
  isPrimary  Boolean  @default(false)  // Conductor principal del vehículo
  startDate  DateTime @default(now())  // Fecha inicio de asignación
  endDate    DateTime?                 // Fecha fin de asignación (opcional)
  notes      String?                   // Notas sobre la asignación
  assignedBy String?                   // ID del usuario que asignó
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driver  Driver  @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([tenantId, vehicleId, driverId]) // No duplicados por tenant
  @@index([tenantId])
  @@index([vehicleId])
  @@index([driverId])
  @@index([status])
  @@index([startDate])
}

// ========================================
// MONITORING & ALERTS
// ========================================

model OdometerLog {
  id           Int                   @id @default(autoincrement())
  vehicleId    Int
  driverId     Int?
  kilometers   Int?
  hours        Int?
  measureType  OdometerMeasureType   @default(KILOMETERS)
  recordedAt   DateTime              @default(now())
  createdAt    DateTime              @default(now())
  
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driver  Driver? @relation(fields: [driverId], references: [id])

  @@index([vehicleId])
  @@index([driverId])
  @@index([recordedAt])
}

model MaintenanceAlert {
  id                    Int           @id @default(autoincrement())
  tenantId              String
  vehicleId             Int
  programItemId         Int           // VehicleProgramItem específico (granular)

  // TIPO Y CLASIFICACIÓN
  type                  AlertType     @default(PREVENTIVE)
  category              AlertCategory // CRITICAL_SAFETY, MAJOR_COMPONENT, ROUTINE, MINOR

  // CONTEXTO (copiado del item al crear alerta)
  itemName              String        // "Cambio aceite motor"
  packageName           String        // "Mantenimiento 15,000 km" (contexto visual)
  description           String?
  estimatedCost         Decimal?      @db.Decimal(10, 2)
  estimatedDuration     Decimal?      @db.Decimal(5, 2) // Horas

  // NUEVO: Info técnica heredada de MantItem
  technicalNotes        String?       @db.Text // Copiado de MantItem.technicalNotes
  recommendedParts      Json?         // Snapshot de parts recomendados
  customNotes           String?       @db.Text // Admin puede agregar notas específicas

  // KILOMETRAJE
  scheduledKm           Int           // Km programado del item
  currentKmAtCreation   Int           // Km cuando se generó alerta
  currentKm             Int           // Km actual (actualizado por cron)
  kmToMaintenance       Int           // scheduledKm - currentKm
  alertThresholdKm      Int           // Umbral que disparó (1000, 500, etc)

  // PRIORIZACIÓN INTELIGENTE
  priority              Priority      @default(MEDIUM)
  alertLevel            AlertLevel    // LOW, MEDIUM, HIGH, CRITICAL (semaforización)
  priorityScore         Int           @default(50) // 0-100 calculado

  // ESTADO Y WORKFLOW
  status                AlertStatus   @default(PENDING)

  // TRACKING DE ATENCIÓN
  viewedBy              String[]      // Array de user IDs que vieron
  firstViewedAt         DateTime?
  acknowledgedBy        String?
  acknowledgedAt        DateTime?

  // SNOOZE (posponer)
  snoozedUntil          DateTime?
  snoozeReason          String?
  snoozedBy             String?

  // CONEXIÓN CON WORKORDER
  workOrderId           Int?
  workOrderCreatedAt    DateTime?
  workOrderCreatedBy    String?

  // MÉTRICAS DE PERFORMANCE
  responseTimeMinutes   Int?          // Minutos desde creación hasta WO
  completionTimeHours   Int?          // Horas desde WO hasta cierre
  wasOnTime             Boolean?      // ¿Se completó antes de vencer?
  actualCost            Decimal?      @db.Decimal(10, 2)
  costVariance          Decimal?      @db.Decimal(10, 2) // actualCost - estimatedCost

  // NOTIFICACIONES
  notificationsSent     Int           @default(0)
  lastNotificationAt    DateTime?

  // AUDITORÍA
  notes                 String?
  cancelReason          String?
  cancelledBy           String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  closedAt              DateTime?

  // RELACIONES
  tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicle               Vehicle                @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  programItem           VehicleProgramItem     @relation(fields: [programItemId], references: [id], onDelete: Cascade)
  workOrder             WorkOrder?             @relation(fields: [workOrderId], references: [id])

  @@index([tenantId])
  @@index([vehicleId])
  @@index([programItemId])
  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([alertLevel])
  @@index([scheduledKm])
  @@index([wasOnTime])
  @@unique([programItemId, status])
}

model Document {
  id           String         @id @default(uuid())
  tenantId     String
  vehicleId    Int
  type         DocumentType
  fileName     String
  fileUrl      String
  expiryDate   DateTime?
  status       DocumentStatus @default(ACTIVE)
  uploadedAt   DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([vehicleId])
  @@index([type])
  @@index([expiryDate])
}

// ========================================
// NUEVA ARQUITECTURA: VEHICLE MAINTENANCE PROGRAMS
// Arquitectura simplificada para mantenimiento preventivo/correctivo
// ========================================

model VehicleMantProgram {
  id                    Int      @id @default(autoincrement())
  tenantId              String
  vehicleId             Int
  name                  String   // "Programa Toyota Hilux ABC-123"
  description           String?  // Descripción del programa

  // INFORMACIÓN DE ORIGEN
  generatedFrom         String?  // "Template: Toyota Hilux Standard v1.2"
  generatedAt           DateTime @default(now())
  generatedBy           String   // User ID quien generó el programa

  // KILOMETRAJE INICIAL
  assignmentKm          Int      // Km del vehículo cuando se asignó
  nextMaintenanceKm     Int?     // Próximo vencimiento calculado
  nextMaintenanceDesc   String?  // Descripción del próximo mantenimiento

  // CONFIGURACIÓN Y ESTADO
  isActive              Boolean  @default(true)
  notes                 String?
  status                Status   @default(ACTIVE)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // RELACIONES
  tenant                Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicle               Vehicle                  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  packages              VehicleProgramPackage[]

  @@unique([vehicleId]) // Un vehículo solo puede tener un programa activo
  @@index([tenantId])
  @@index([vehicleId])
  @@index([isActive])
  @@index([nextMaintenanceKm])
}

model VehicleProgramPackage {
  id              Int      @id @default(autoincrement())
  tenantId        String
  programId       Int
  name            String   // "Mantenimiento 15,000 km" | "Items Correctivos"
  description     String?

  // CONFIGURACIÓN DEL PAQUETE
  triggerKm       Int?     // 15000, 30000, etc. | NULL para correctivos
  packageType     MantType @default(PREVENTIVE) // PREVENTIVE, CORRECTIVE, PREDICTIVE
  priority        Priority @default(MEDIUM)

  // COSTOS Y TIEMPO
  estimatedCost   Decimal? @db.Decimal(10, 2)
  estimatedTime   Decimal? @db.Decimal(5, 2) // Horas
  actualCost      Decimal? @db.Decimal(10, 2)
  actualTime      Decimal? @db.Decimal(5, 2)

  // ESTADO Y EJECUCIÓN
  status          WorkOrderStatus @default(PENDING)
  scheduledKm     Int?     // Km programado específico para este vehículo
  executedKm      Int?     // Km real de ejecución
  startDate       DateTime?
  endDate         DateTime?

  // ASIGNACIONES
  technicianId    Int?
  providerId      Int?
  workOrderId     Int?     // WorkOrder asociada
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // RELACIONES
  tenant          Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  program         VehicleMantProgram    @relation(fields: [programId], references: [id], onDelete: Cascade)
  technician      Technician?           @relation(fields: [technicianId], references: [id])
  provider        Provider?             @relation(fields: [providerId], references: [id])
  workOrder       WorkOrder?            @relation(fields: [workOrderId], references: [id])
  items           VehicleProgramItem[]

  @@index([tenantId])
  @@index([programId])
  @@index([triggerKm])
  @@index([status])
  @@index([scheduledKm])
  @@index([packageType])
}

model VehicleProgramItem {
  id                    Int      @id @default(autoincrement())
  tenantId              String
  packageId             Int      // NUNCA NULL - siempre tiene package padre
  mantItemId            Int      // Referencia al MantItem base

  // TIPO Y CONFIGURACIÓN
  mantType              MantType // PREVENTIVE, CORRECTIVE, PREDICTIVE
  priority              Priority @default(MEDIUM)
  order                 Int      @default(0) // Orden dentro del package

  // KILOMETRAJE Y FECHAS
  scheduledKm           Int?     // Km programado
  detectedKm            Int?     // Km cuando se detectó (correctivos)
  executedKm            Int?     // Km real de ejecución
  scheduledDate         DateTime?
  detectedDate          DateTime? // Para correctivos
  executedDate          DateTime?

  // COSTOS Y TIEMPO
  estimatedCost         Decimal? @db.Decimal(10, 2) // Del MantItem original
  estimatedTime         Decimal? @db.Decimal(5, 2)
  actualCost            Decimal? @db.Decimal(10, 2) // Real ejecutado
  actualTime            Decimal? @db.Decimal(5, 2)

  // ASIGNACIONES Y ESTADO
  technicianId          Int?
  providerId            Int?
  status                WorkOrderStatus @default(PENDING)
  urgency               Boolean  @default(false) // Para correctivos urgentes
  notes                 String?
  description           String?  // Descripción específica del problema
  isOptional            Boolean  @default(false) // Si el item es opcional
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // RELACIONES
  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  package               VehicleProgramPackage   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  mantItem              MantItem                @relation(fields: [mantItemId], references: [id])
  technician            Technician?             @relation(fields: [technicianId], references: [id])
  provider              Provider?               @relation(fields: [providerId], references: [id])
  maintenanceAlerts     MaintenanceAlert[]

  @@index([tenantId])
  @@index([packageId])
  @@index([mantItemId])
  @@index([mantType])
  @@index([status])
  @@index([scheduledKm])
  @@index([urgency])
  @@unique([packageId, mantItemId]) // Un package no puede tener el mismo item duplicado
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PENDING_PAYMENT
  PAST_DUE
  CANCELED
  INCOMPLETE
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
  IN_PROCESS
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  SOLD
}

enum VehicleSituation {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

enum VehicleOwner {
  OWN
  LEASED
  RENTED
}

enum PlateType {
  PARTICULAR
  PUBLICO
}

enum Status {
  ACTIVE
  INACTIVE
}

enum MantType {
  PREVENTIVE
  PREDICTIVE
  CORRECTIVE
  EMERGENCY
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ExpenseType {
  PARTS
  LABOR
  TRANSPORT
  TOOLS
  MATERIALS
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum AuditAction {
  CREATED
  APPROVED
  REJECTED
  MODIFIED
  PAID
  CANCELLED
  COMPLETED
}

enum AlertLevel {
  LOW      // > 1000 km
  MEDIUM   // 500-1000 km  
  HIGH     // < 500 km
  CRITICAL // Vencido
}

enum DocumentType {
  SOAT
  TECNOMECANICA
  INSURANCE
  REGISTRATION
  OTHER
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  EXPIRING_SOON
}

enum OdometerMeasureType {
  KILOMETERS
  HOURS
}

enum TechnicianSpecialty {
  MOTOR
  TRANSMISION
  FRENOS
  SUSPENSION
  ELECTRICO
  ELECTRONICO
  AIRE_ACONDICIONADO
  PINTURA
  CARROCERIA
  SOLDADURA
  GENERAL
}

enum ProviderSpecialty {
  REPUESTOS
  LUBRICANTES
  NEUMATICOS
  BATERIAS
  FILTROS
  FRENOS
  SUSPENSION
  ELECTRICO
  PINTURA
  CARROCERIA
  SOLDADURA
  SERVICIOS_GENERALES
  GRUA
  SEGUROS
}

enum ScheduleStatus {
  SCHEDULED    // Programado, esperando llegar al kilometraje
  DUE          // Vencido, debe hacerse ya
  OVERDUE      // Atrasado, debería haberse hecho
  IN_PROGRESS  // En ejecución (WorkOrder creada)
  COMPLETED    // Completado exitosamente
  SKIPPED      // Saltado/omitido por el usuario
  CANCELLED    // Cancelado
}

enum AlertStatus {
  PENDING       // Generada, esperando atención
  ACKNOWLEDGED  // Vista y reconocida por admin
  IN_PROGRESS   // WorkOrder creada y asignada
  COMPLETED     // Mantenimiento ejecutado
  CLOSED        // Ciclo cerrado (WO + factura + costo)
  SNOOZED       // Pospuesta temporalmente
  CANCELLED     // Cancelada (vehículo vendido, plan cambiado)
}

enum AlertType {
  PREVENTIVE        // Mantenimiento preventivo programado
  OVERDUE           // Mantenimiento vencido (pasó el km)
  EARLY_WARNING     // Aviso temprano (>1000km)
}

enum AlertCategory {
  CRITICAL_SAFETY   // Frenos, dirección, neumáticos
  MAJOR_COMPONENT   // Motor, transmisión, suspensión
  ROUTINE           // Aceite, filtros, lubricación
  MINOR             // Limpieza, inspecciones visuales
}

// ========================================
// ENUMS - INVOICE & MASTER PARTS
// ========================================

enum ItemType {
  ACTION   // Inspección, revisión (no factura artículo)
  PART     // Repuesto facturable (filtro, aceite, etc.)
  SERVICE  // Servicio completo (mano obra + materiales del proveedor)
}

enum InvoiceStatus {
  PENDING      // Registrada, pendiente aprobación
  APPROVED     // Aprobada para pago
  PAID         // Pagada
  OVERDUE      // Vencida
  CANCELLED    // Cancelada
}

enum CompatibilityLevel {
  RECOMMENDED   // OEM o recomendado fabricante
  COMPATIBLE    // Compatible genérico
  CONDITIONAL   // Compatible bajo condiciones
  INCOMPATIBLE  // No compatible
}